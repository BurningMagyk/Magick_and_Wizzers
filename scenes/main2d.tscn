[gd_scene load_steps=11 format=3 uid="uid://bc5gmn57qtpie"]

[ext_resource type="Script" path="res://src/Main/Main.cs" id="1_d0b4a"]
[ext_resource type="PackedScene" uid="uid://dy4qvtdocn74e" path="res://scenes/tile2d.tscn" id="2_8d3qu"]
[ext_resource type="Script" path="res://src/UI/UI.cs" id="4_j1k82"]
[ext_resource type="Script" path="res://src/UI/HandView.cs" id="4_o3qah"]
[ext_resource type="PackedScene" uid="uid://ctgrwf42n2e28" path="res://scenes/card.tscn" id="4_of886"]
[ext_resource type="PackedScene" uid="uid://bcccthspywgs4" path="res://scenes/piece2d.tscn" id="4_r73ob"]
[ext_resource type="Texture2D" uid="uid://b2q5vetsajba6" path="res://resources/card_sleeve.png" id="5_4m5vo"]
[ext_resource type="Texture2D" uid="uid://ca02dx33dsurg" path="res://resources/crosshair.png" id="8_17b01"]

[sub_resource type="CSharpScript" id="CSharpScript_1h7an"]
script/source = "using Godot;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Main {
  public partial class Board2D : Node {
	private const int BOARD_SIZE = 7;

	private readonly List<Tile2D[,]> tiles = new List<Tile2D[,]>();
	private readonly HashSet<Piece2D> pieces = new HashSet<Piece2D>();

	private PackedScene pieceScene;
	private Tile2D hoveredTile;
	private int pieceId = 0;

	// Called when the node enters the scene tree for the first time.
	public override void _Ready() {
		for (int i = 0; i <= (int) Tile2D.MAX_PARTITION; i++) {
			int boardLength = BOARD_SIZE * (int) Math.Pow(2, i);
			tiles.Add(new Tile2D[boardLength, boardLength]);
		}

	  	PackedScene tileScene = ResourceLoader.Load<PackedScene>(\"res://scenes/tile2d.tscn\");
	  	for (int i = 0; i < BOARD_SIZE; i++) {
			for (int j = 0; j < BOARD_SIZE; j++) {
				Sprite2D tileSprite = tileScene.Instantiate() as Sprite2D;
				tileSprite.Position = new Vector2(
					Tile2D.TILE_SIZE / 2 + Tile2D.TILE_SIZE * i,
					Tile2D.TILE_SIZE / 2 + Tile2D.TILE_SIZE * j
		  		);
		  		tileSprite.Visible = true;

				string topPartitionTypeName = Util.ToTitleCase(Enum.GetNames(typeof(Tile2D.PartitionType))[0]);
		  		tileSprite.Name = topPartitionTypeName + \" [\" + i + \", \" + j + \"]\";
			
		  		AddChild(tileSprite);
				tiles[0][i, j] = GetNode<Tile2D>(tileSprite.Name.ToString());
				tiles[0][i, j].Coordinate = new Vector2I(i, j);
				tiles[0][i, j].Partition(tiles.Skip(1).ToList());
			}
		}

		pieceScene = ResourceLoader.Load<PackedScene>(\"res://scenes/piece.tscn\");

		// Make the base stuff invisible.
		GetNode<Tile2D>(\"Tile\").Visible = false;
		GetNode<Piece2D>(\"Piece\").Visible = false;
	}

	// Called every frame. 'delta' is the elapsed time since the previous frame.
	public override void _Process(double delta) {
	  
	}

	public void AddPiece(Tile2D targetTile, Stats stats, Texture2D illustration) {
		// Create a new piece.
		Sprite2D pieceSprite = pieceScene.Instantiate() as Sprite2D;
		pieceSprite.Name = stats.Name + \" \" + pieceId++;
		pieceSprite.Texture = illustration;
		AddChild(pieceSprite);

		// Set the piece's stats.
		Piece2D piece = GetNode<Piece2D>(pieceSprite.Name.ToString());
		piece.Stats = stats;
		piece.Tile = targetTile;
		pieces.Add(piece);
	}

	public Tile2D GetTileAt(Vector2I index, Tile2D.PartitionType partitionType) {
		return tiles[(int) partitionType][index.X, index.Y];
	}
  }
}
"

[sub_resource type="CSharpScript" id="CSharpScript_30e7p"]
script/source = "using Godot;
using System;
using Main;

namespace UI {
	public partial class BoardView2D : Node {
		public bool Showing { get; private set; }
		public Tile2D.PartitionType HoverPartition;
		public Tile2D HoveredTile { get; private set;}
		
		private Sprite2D crosshair;

		// Called when the node enters the scene tree for the first time.
		public override void _Ready() {
			crosshair = GetNode<Sprite2D>(\"Crosshair\");
			HoverPartition = Tile2D.MAX_PARTITION;
			Show();
		}

		// Called every frame. 'delta' is the elapsed time since the previous frame.
		public override void _Process(double delta) {
			
		}

		public Vector2I GetHoverPoint(Camera2D camera) {
			return GetHoverPoint(camera, HoverPartition);
		}
		public Vector2I GetHoverPoint(Camera2D camera, Tile2D.PartitionType partitionType) {
			Rect2 viewPortRect = camera.GetViewportRect();
			crosshair.Position = new Vector2(viewPortRect.Size.X / 2, viewPortRect.Size.Y / 2);

			Vector2 centerPoint = camera.GetScreenCenterPosition();
			return new Vector2I(
				(int) Math.Floor(centerPoint.X / Tile2D.TILE_SIZE * Mathf.Pow(2, (int) partitionType)),
				(int) Math.Floor(centerPoint.Y / Tile2D.TILE_SIZE * Mathf.Pow(2, (int) partitionType))
			);
		}

		public void Hover(Tile2D tile, bool showingHand) {
			Tile2D.HoverType hoverType = showingHand ? Tile2D.HoverType.CAST : Tile2D.HoverType.NORMAL;
			if (HoveredTile != null) { HoveredTile.Unhover(hoverType); }
			HoveredTile = tile;
			if (HoveredTile != null) { HoveredTile.Hover(hoverType); }
		}

		public void Show() {
			crosshair.Visible = true;
			Showing = true;
		}

		public void Hide() {
			crosshair.Visible = false;
			Showing = false;
		}
	}
}
"

[node name="Main2D" type="Node2D"]
script = ExtResource("1_d0b4a")

[node name="Board" type="Node2D" parent="."]
script = SubResource("CSharpScript_1h7an")

[node name="Tile" parent="Board" instance=ExtResource("2_8d3qu")]
script = null

[node name="Piece" parent="Board" instance=ExtResource("4_r73ob")]
z_index = 1
script = null

[node name="UI" type="Node" parent="."]
script = ExtResource("4_j1k82")

[node name="Camera" type="Camera2D" parent="UI"]

[node name="Board View" type="CanvasLayer" parent="UI"]
script = SubResource("CSharpScript_30e7p")

[node name="Crosshair" type="Sprite2D" parent="UI/Board View"]
scale = Vector2(0.2, 0.2)
texture = ExtResource("8_17b01")

[node name="Hand View" type="CanvasLayer" parent="UI"]
script = ExtResource("4_o3qah")

[node name="Card" parent="UI/Hand View" instance=ExtResource("4_of886")]

[node name="Card Sleeve" type="Sprite2D" parent="UI/Hand View"]
z_index = 1
texture = ExtResource("5_4m5vo")
centered = false
